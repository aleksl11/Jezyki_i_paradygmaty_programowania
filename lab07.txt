(do 
	((i 0 (incf i)) 
	((j 10) (dcef j))) ((zerop j) 'done) (print (+ i j )))
	
	
zadanie 1
Łączenie 2 list

(defun laczenie1 (l1 l2)
	(append l1 l2))
	
(defun laczenie2 (l1 l2)
	(let ((l3 '()))
		(dolist (item l1)
			(push item l3))
		(dolist (item l2)
			(push item l3))
		(reverse l3)
 	)
)

zadanie 2
Napisz funkcję która odwraca listę

(defun odwracanie (lista)
	(let ((wynik '()))
		(dolist (item lista)
			(push item wynik)
		)
		wynik
	)
)

zadanie 3
czy lista jest palindromem

(defun palindrom (lista)
	(let ((listaodwr (odwracanie lista)))
		(equal lista listaodwr)
	)
)

zadanie 4
Napisz funkcję, która sortuje rosnąco listę liczb całkowitych

(defun sortowanie (lista)
	(dotimes (i (length lista))
		(dotimes (j (length lista))
			(when (< (nth i lista) (nth j lista)) (let ((temp (nth i lista)))
									(setf (nth i lista) (nth j lista))
									(setf (nth j lista) temp)
								)
			)
		)
	)
	lista
)

zadanie 5
Napisz funkcję, która oblicz iloczyn dwóch list liczbowych parami różnych, w wyniku 
otrzymujemy listę iloczynów,

w wyniku jest tylko tyle iloczynów ile elementów ma krótsza lista

(defun iloczynlist (l1 l2)
	(let ((wynik '()))
		(if (< (length l1) (length l2))
			(dotimes (i (length l1))
				(push (* (nth i l1) (nth i l2)) wynik)
			)
			(dotimes (i (length l2))
				(push (* (nth i l1) (nth i l2)) wynik)
			)
		)
		(reverse wynik)
	)
)

